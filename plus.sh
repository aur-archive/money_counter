#!/bin/bash

# set -x

#-BASH----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-END-BASH------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#-VARS----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
. '/data/shells/bash/lib/start.var'
. "${LIB_DIR}/date.var"
#-END-VARS------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#-FUNCTIONS-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
. "${LIB_DIR}/start.fn"
. "${LIB_DIR}/date.fn"
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_SORT () {
  COUNT=`cat "${RES}" | wc -l`
  [ -f ${TMP} ] && rm ${TMP}
  for ((x=1;x<=${COUNT};x++))
    do
      DAY=`awk "NR==${x}" ${RES} | cut -c 2-3`
      MOUNT=`awk "NR==${x}" ${RES} | cut -c 5-6`
      YEAR=`awk "NR==${x}" ${RES} | cut -c 8-11`
      OTH=`awk "NR==${x}" ${RES} | cut -c 12-`
      echo "${YEAR}${MOUNT}${DAY}${OTH}" >> ${TMP}
    done
  sort ${TMP} > ${TMP}.sort
  rm ${TMP}
  for ((x=1;x<=${COUNT};x++))
    do
      DAY=`awk "NR==${x}" ${TMP}.sort | cut -c 7-8`
      MOUNT=`awk "NR==${x}" ${TMP}.sort | cut -c 5-6`
      YEAR=`awk "NR==${x}" ${TMP}.sort | cut -c 1-4`
      OTH=`awk "NR==${x}" ${TMP}.sort | cut -c 9-`
      echo "|${DAY}.${MOUNT}.${YEAR}${OTH}" >> ${TMP}
    done
  cp ${RES} ${RES}.old
  mv ${TMP} ${RES}
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_ADD () {
  CONTROL_DATE=${NOW_DATE}
  [ -f ${RES} ] && CONTROL_DATE=`tail -1 ${RES} | awk -F'|' '{print $2}'`
  _READ_DATE '-text' "получения" 
  echo -n "Укажите сумму (в случае необходимости - с ведущими нулями, они будут далее удалены автоматически): "
  tput sc
  echo -n "__'___.__"
  tput rc
  read -n2 x
  echo -n "'"
  SUMMA=${x}
  read -n3 x
  echo -n '.'
  SUMMA="${SUMMA}${x}"
  read -n2 x
  echo
  SUMMA="${SUMMA}.${x}"
  CONTROL=`echo ${SUMMA} | cut -c 1`
  while [ "${CONTROL}" = '0' -a `echo ${SUMMA} | cut -c 2` != '.' ]
    do
      SUMMA=`echo ${SUMMA} | cut -c 2-`
      CONTROL=`echo ${SUMMA} | cut -c 1`
    done
  case ${1} in
    1)
      COMMENT='зарплату'
      ;;
    2)
      COMMENT='аванс'
      ;;
    3)
      COMMENT='отпускные'
      ;;
    4)
      COMMENT='бонус кассира'
      ;;
    5)
      COMMENT='ваучер от клиента'
      ;;
    6)
      COMMENT='ваучер от МЕТРО'
      ;;
    7)
      COMMENT='подарок от МЕТРО'
      ;;
    8)
      COMMENT='недостачу'
      ;;
    9)
      COMMENT='межрасчетные выплаты'
      ;;
    0)
      _EXIT
      ;;
  esac
  echo -n "
${DATE} вы получили ${COMMENT} в размере ${SUMMA}. Верно? " #| sed "s/[0-9][0-9][0-9]\./\'&/"
  read -n1 x
  echo
  case $x in
    y|Y|н|Н)
      echo "|${DATE}|${1}|${SUMMA}|" >> ${RES}
      [ $? -eq '0' ] && echo "Запись добавлена."
      ;;
  esac
  _WHO_MORE ${DATE} ${CONTROL_DATE}
  [ ${SRAVN} -eq 2 ] && _SORT && echo "Файл отсортирован."
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_LS () {
  DATE=$1
  DATE_END=$2
  _WHO_MORE ${DATE} ${DATE_END}
  if [ ${SRAVN} -eq '1' ]
    then
      echo "
Дата начала периода не может быть меньше даты его окончания.
"
      _EXIT 2
  fi
  echo
  while [ "${SRAVN}" -ne "1" ]
    do
      LISTING=`cat ${RES} | grep "${DATE}"`
      COUNT=0
      [ -n "${LISTING}" ] && COUNT=`echo "${LISTING}" | wc -l`
      for ((x=1;x<=${COUNT};x++))
        do
          TYPE=`echo "${LISTING}" | awk "NR==${x}" | awk -F'|' '{print $3}'`
          SUMMA=`echo "${LISTING}" | awk "NR==${x}" | awk -F'|' '{print $4}'`
          case ${TYPE} in
            1)
              COMMENT='получена зарплата'
              ;;
            2)
              COMMENT='получен аванс'
              ;;
            3)
              COMMENT='получены отпускные'
              ;;
            4)
              COMMENT='получен бонус кассира'
              ;;
            5)
              COMMENT='получен ваучер от клиента'
              ;;
            6)
              COMMENT='получен ваучер от МЕТРО'
              ;;
            7)
              COMMENT='получен подарок от МЕТРО'
              ;;
            8)
              COMMENT='получена недостача'
              ;;
            9)
              COMMENT='получены межрасчетные выплаты'
              ;;
          esac
          echo "${DATE} ${COMMENT} на сумму ${SUMMA}" | sed "s/[0-9][0-9][0-9]\./\'&/g"
        done
      _NEXT_DATA ${DATE}
      _WHO_MORE ${DATE} ${DATE_END}
    done
  echo  
}
#-END-FUNCTIONS-------------------------------------------------------------------------------------------------------------------------------------------------------------------

#-PROGRAM-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ ! -f "${RES}" -a $1 != '-add' ]
  then
    echo "
Файл выплат отсутствует."
    _EXIT 1
fi
case $1 in
  '-add')
    shift
    _ADD $1
    ;;
  '-ls')
    shift
    _LS $1 $2
    ;;
esac
_EXIT 0
#-END-PROGRAM---------------------------------------------------------------------------------------------------------------------------------------------------------------------
